/*
 * Copyright 2015 Nicolas Rinaudo
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package kantan.csv

/** Defines [[RowDecoder]] instances for types with various arities. */
trait GeneratedRowCodecs {
  private def combine[A](decoder: RowDecoder[A])(encoder: RowEncoder[A]): RowCodec[A] =
    RowCodec.from(decoder.decode _)(encoder.encode _)

  /** Creates a new [[RowCodec]] instance from the specified encoding and decoding functions.
   *
   * @example
   * {{{
   * scala> case class Ints(i1: Int)
   *
   * scala> val codec = RowCodec.codec(Ints.apply _)((is: Ints) => (is.i1))
   *
   * scala> codec.encode(Ints(1))
   * res0: Seq[String] = List(1)
   *
   * scala> codec.decode(Seq("1"))
   * res1: DecodeResult[Ints] = Right(Ints(1))
   * }}}
   */
  def codec[C, A1: CellEncoder: CellDecoder](f: A1 => C)(g: C => A1): RowCodec[C] =
    combine(RowDecoder.decoder(0)(f))(RowEncoder.encoder(g))

  [2..#/** Creates a new [[RowCodec]] instance from the specified encoding and decoding functions.
    *
    * @example
    * {{{
    * scala> case class Ints([#i1: Int#])
    *
    * scala> val codec = RowCodec.codec([#0#])(Ints.apply _)((is: Ints) => ([#is.i1#]))
    *
    * scala> codec.encode(Ints([#1#]))
    * res0: Seq[String] = Vector([#1#])
    *
    * scala> codec.decode(Seq([#"1"#]))
    * res1: DecodeResult[Ints] = Right(Ints([#1#,]))
    * }}}
    *
    * @param f encoding function.
    * @param g decoding function.
    [#* @param i1 index of the cell that should be passed as parameter number 1 of `f` and will be at index 1 of
    *           the value returned by `g`#
    ]
    */
  def codec[C, [#A1: CellEncoder: CellDecoder#]]([#i1: Int#])(f: ([#A1#]) => C)(g: C => ([#A1#])): RowCodec[C] =
    combine(RowDecoder.decoder([#i1#])(f))(RowEncoder.encoder([#i1#])(g))#
  ]

  /** Creates a new [[RowCodec]] instance from the specified encoding and decoding functions.
    *
    * @example
    * {{{
    * scala> case class Ints(i1: Int)
    *
    * scala> val codec = RowCodec.ordered(Ints.apply _)((is: Ints) => (is.i1))
    *
    * scala> codec.encode(Ints(1))
    * res0: Seq[String] = List(1)
    *
    * scala> codec.decode(Seq("1"))
    * res1: DecodeResult[Ints] = Right(Ints(1))
    * }}}
    *
    * @param f encoding function.
    * @param g decoding function.
    */
  def ordered[C, A1: CellEncoder: CellDecoder](f: A1 => C)(g: C => A1): RowCodec[C] =
    combine(RowDecoder.decoder(0)(f))(RowEncoder.encoder(g))

  [2..#/** Creates a new [[RowCodec]] instance from the specified encoding and decoding functions.
    *
    * @example
    * {{{
    * scala> case class Ints([#i1: Int#])
    *
    * scala> val codec = RowCodec.ordered(Ints.apply _)((is: Ints) => ([#is.i1#]))
    *
    * scala> codec.encode(Ints([#1#]))
    * res0: Seq[String] = Vector([#1#])
    *
    * scala> codec.decode(Seq([#"1"#]))
    * res1: DecodeResult[Ints] = Right(Ints([#1#,]))
    * }}}
    *
    * @param f encoding function.
    * @param g decoding function.
    ]
    */
  def ordered[C, [#A1: CellEncoder: CellDecoder#]](f: ([#A1#]) => C)(g: C => ([#A1#])): RowCodec[C] =
    combine(RowDecoder.ordered(f))(RowEncoder.ordered(g))#
  ]

  /** Creates a new [[RowCodec]] instance for the specified encoding and decoding functions.
    *
    * This is meant for case classes and is unsafe for any other type: a case class' `unapply` method never returns
    * `Some`, which allows `caseCodec` to call `get` on the return value.
    *
    * @example
    * {{{
    * scala> case class Ints(i1: Int)
    *
    * scala> val codec = RowCodec.caseCodec(Ints.apply _)(Ints.unapply _)
    *
    * scala> codec.encode(Ints(1))
    * res0: Seq[String] = List(1)
    *
    * scala> codec.decode(Seq("1"))
    * res1: DecodeResult[Ints] = Right(Ints(1))
    * }}}
    */
  def caseCodec[C, A1: CellEncoder : CellDecoder](f: A1 => C)(g: C => Option[A1]): RowCodec[C] =
    combine(RowDecoder.decoder(0)(f))(RowEncoder.caseEncoder(g))

  [2..#/** Creates a new [[RowCodec]] instance for the specified encoding and decoding functions.
    *
    * This is meant for case classes and is unsafe for any other type: a case class' `unapply` method never returns
    * `Some`, which allows `caseCodec` to call `get` on the return value.
    *
    * @example
    * {{{
    * scala> case class Ints([#i1: Int#])
    *
    * scala> val codec = RowCodec.caseCodec([#0#])(Ints.apply _)(Ints.unapply _)
    *
    * scala> codec.encode(Ints([#1#]))
    * res0: Seq[String] = Vector([#1#])
    *
    * scala> codec.decode(Seq([#"1"#]))
    * res1: DecodeResult[Ints] = Right(Ints([#1#,]))
    * }}}
    */
  def caseCodec[C, [#A1: CellEncoder : CellDecoder#]]([#i1: Int#])(f: ([#A1#]) => C)(g: C => Option[Tuple1[[#A1#]]]): RowCodec[C] =
    combine(RowDecoder.decoder([#i1#])(f))(RowEncoder.caseEncoder([#i1#])(g))#
  ]

  /** Creates a new [[RowCodec]] instance for the specified encoding and decoding functions.
    *
    * This is meant for case classes and is unsafe for any other type: a case class' `unapply` method never returns
    * `Some`, which allows `caseCodec` to call `get` on the return value.
    *
    * @example
    * {{{
    * scala> case class Ints(i1: Int)
    *
    * scala> val codec = RowCodec.caseOrdered(Ints.apply _)(Ints.unapply _)
    *
    * scala> codec.encode(Ints(1))
    * res0: Seq[String] = List(1)
    *
    * scala> codec.decode(Seq("1"))
    * res1: DecodeResult[Ints] = Right(Ints(1))
    * }}}
    */
  def caseOrdered[C, A1: CellEncoder : CellDecoder](f: A1 => C)(g: C => Option[A1]): RowCodec[C] =
    combine(RowDecoder.ordered(f))(RowEncoder.caseOrdered(g))

  [2..#/** Creates a new [[RowCodec]] instance for the specified encoding and decoding functions.
    *
    * This is meant for case classes and is unsafe for any other type: a case class' `unapply` method never returns
    * `Some`, which allows `caseCodec` to call `get` on the return value.
    *
    * @example
    * {{{
    * scala> case class Ints([#i1: Int#])
    *
    * scala> val codec = RowCodec.caseOrdered(Ints.apply _)(Ints.unapply _)
    *
    * scala> codec.encode(Ints([#1#]))
    * res0: Seq[String] = Vector([#1#])
    *
    * scala> codec.decode(Seq([#"1"#]))
    * res1: DecodeResult[Ints] = Right(Ints([#1#,]))
    * }}}
    */
  def caseOrdered[C, [#A1: CellEncoder : CellDecoder#]](f: ([#A1#]) => C)(g: C => Option[Tuple1[[#A1#]]]): RowCodec[C] =
    combine(RowDecoder.ordered(f))(RowEncoder.caseOrdered(g))#
  ]
}
