/*
 * Copyright 2015 Nicolas Rinaudo
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package kantan.csv

/** Provides [[RowDecoder]] instance construction methods. */
trait GeneratedRowDecoders {
  [#/** Creates a new [[RowDecoder]] from the specified function.
    *
    * @example
    * {{{
    * scala> case class Ints([#i1: Int#])
    *
    * scala> RowDecoder.decoder([#0#])(Ints.apply _).decode(Seq([#"1"#]))
    * res0: DecodeResult[Ints] = Right(Ints([#1#,]))
    * }}}
    * @param f encoding function.
    [#* @param i1 index of the cell that should be passed as parameter number 1 of `f`#
    ]
    */
  def decoder[[#A1: CellDecoder#], R]([#i1: Int#])(f: ([#A1#]) => R): RowDecoder[R] =
    RowDecoder.from(ss => for {
      [#f1 <- RowDecoder.decodeCell[A1](ss, i1)#
      ]
    } yield f([#f1#]))#

  ]

  [#/** Creates a new [[RowDecoder]] from the specified function.
    *
    * Cells are mapped to arguments of `f` in the order they are found.
    *
    * @example
    * {{{
    * scala> case class Ints([#i1: Int#])
    *
    * scala> RowDecoder.ordered(Ints.apply _).decode(Seq([#"1"#]))
    * res0: DecodeResult[Ints] = Right(Ints([#1#,]))
    * }}}
    *
    */
  def ordered[[#A1: CellDecoder#], R](f: ([#A1#]) => R): RowDecoder[R] =
      decoder([#0#])(f)#

  ]
}
